-- Deshabilitar triggers temporalmente
ALTER TABLE Review
    DISABLE TRIGGER after_insert_review;
ALTER TABLE Review
    DISABLE TRIGGER after_review_insert;
ALTER TABLE Booking
    DISABLE TRIGGER after_booking_insert;
ALTER TABLE Booking
    DISABLE TRIGGER before_booking_insert;


--insertar data provicional de 1000 a partir de un csv
COPY usuario FROM '/Users/stewart/BD/data1000000/usuarios1000000.csv' DELIMITER ',' CSV HEADER;
COPY Guest (user_id) FROM '/Users/stewart/BD/data1000000/guests1000000.csv' DELIMITER ',' CSV HEADER;
COPY Host (user_id) FROM '/Users/stewart/BD/data1000000/hosts1000000.csv' DELIMITER ',' CSV HEADER;
COPY Message FROM '/Users/stewart/BD/data1000000/messages1000000.csv' DELIMITER ',' CSV HEADER;
COPY Property (property_id, n_bathrooms, title, n_beds, property_type, n_guests, n_rooms, host_user_id,
               price) FROM '/Users/stewart/BD/data1000000/properties1000000.csv' DELIMITER ',' CSV HEADER;
COPY Promotion (promotion_id, start_date, end_date, discount_rate, prom_description,
                property_id) FROM '/Users/stewart/BD/data1000000/promotions1000000.csv' DELIMITER ',' CSV HEADER;
COPY Booking (booking_id, timestamp, check_in_date, check_out_date, guest_user_id,
              property_id) FROM '/Users/stewart/BD/data1000000/bookings1000000.csv' DELIMITER ',' CSV HEADER;
COPY Amenities FROM '/Users/stewart/BD/data1000000/amenities1000000.csv' DELIMITER ',' CSV HEADER;
COPY Review FROM '/Users/stewart/BD/data1000000/reviews1000000.csv' DELIMITER ',' CSV HEADER;
COPY SelectFavorite FROM '/Users/stewart/BD/data1000000/select_favorites1000000.csv' DELIMITER ',' CSV HEADER;


-- Volver a habilitar triggers
ALTER TABLE Review
    ENABLE TRIGGER after_insert_review;
ALTER TABLE Review
    ENABLE TRIGGER after_review_insert;
ALTER TABLE Booking
    ENABLE TRIGGER after_booking_insert;
ALTER TABLE Booking
    ENABLE TRIGGER before_booking_insert;

-- Recalcular promedios de calificación después de la inserción
-- Calcular promedio de calificación de propiedades
WITH PropertyRatings AS (SELECT P.property_id,
                                COALESCE(AVG(R.rating), 0) AS avg_rating
                         FROM Property P
                                  JOIN Booking B ON P.property_id = B.property_id
                                  JOIN Review R ON B.booking_id = R.booking_id
                         GROUP BY P.property_id)
UPDATE Property
SET rating = PR.avg_rating
FROM PropertyRatings PR
WHERE Property.property_id = PR.property_id;

-- Calcular promedio de calificación de hosts
WITH HostRatings AS (SELECT H.user_id,
                            COALESCE(AVG(R.rating), 0) AS avg_rating
                     FROM Host H
                              JOIN Property P ON H.user_id = P.host_user_id
                              JOIN Booking B ON P.property_id = B.property_id
                              JOIN Review R ON B.booking_id = R.booking_id
                     GROUP BY H.user_id)
UPDATE Host
SET host_rating = HR.avg_rating
FROM HostRatings HR
WHERE Host.user_id = HR.user_id;

--------
--Recalcular puntos de los invitados:

UPDATE Guest
SET points = Guest.points + subquery.total_points
FROM (SELECT guest_user_id,
             COUNT(*) * 5 AS total_points
      FROM Booking
      GROUP BY guest_user_id) AS subquery
WHERE Guest.user_id = subquery.guest_user_id;

-- Ajustar el precio total de la reserva basado en puntos y descuentos
UPDATE Booking
SET total_price = subquery.adjusted_price
FROM (SELECT B.booking_id,
             CASE
                 WHEN G.points > 29 AND B.timestamp BETWEEN P.start_date AND P.end_date THEN
                     ROUND(Pr.price * (1 - P.discount_rate / 100), 2)
                 ELSE
                     Pr.price
                 END AS adjusted_price
      FROM Booking B
               JOIN Property Pr ON B.property_id = Pr.property_id
               JOIN Promotion P ON Pr.property_id = P.property_id
               JOIN Guest G ON B.guest_user_id = G.user_id) AS subquery
WHERE Booking.booking_id = subquery.booking_id;

-- Actualizar puntos de los invitados después del ajuste de precios
UPDATE Guest
SET points = points - 30
WHERE user_id IN (SELECT guest_user_id
                  FROM Booking B
                           JOIN Promotion P ON B.property_id = P.property_id
                  WHERE Guest.points > 29
                    AND B.timestamp BETWEEN P.start_date AND P.end_date
                    AND B.total_price != (SELECT price FROM Property WHERE property_id = B.property_id));